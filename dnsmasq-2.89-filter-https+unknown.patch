diff --git a/Makefile b/Makefile
index 48e8d3b..25acb1e 100644
--- a/Makefile
+++ b/Makefile
@@ -18,7 +18,7 @@
 
 # Variables you may well want to override.
 
-PREFIX        = /usr/local
+PREFIX        = /usr/local/dnsmasq-2.89
 BINDIR        = $(PREFIX)/sbin
 MANDIR        = $(PREFIX)/share/man
 LOCALEDIR     = $(PREFIX)/share/locale
diff --git a/src/cache.c b/src/cache.c
index 1c0e250..56a8580 100644
--- a/src/cache.c
+++ b/src/cache.c
@@ -1959,6 +1959,20 @@ char *record_source(unsigned int index)
   return "<unknown>";
 }
 
+// patch: function returns integer 1 if query type is unknown.
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type)
+{
+  unsigned int i;
+  for (i = 0; i < (sizeof(typestr)/sizeof(typestr[0])); i++)
+    if (typestr[i].type == type)
+      {
+    return 0;
+      }
+  return 1;
+}
+// end of patch
+
 static char *querystr(char *desc, unsigned short type)
 {
   unsigned int i;
diff --git a/src/dns-protocol.h b/src/dns-protocol.h
index 76ac66a..85c5b6c 100644
--- a/src/dns-protocol.h
+++ b/src/dns-protocol.h
@@ -71,6 +71,7 @@
 #define T_NSEC          47
 #define T_DNSKEY        48
 #define T_NSEC3         50
+#define T_HTTPS         65
 #define	T_TKEY		249		
 #define	T_TSIG		250
 #define T_AXFR          252
diff --git a/src/dnsmasq.h b/src/dnsmasq.h
index 2f95c12..123c96b 100644
--- a/src/dnsmasq.h
+++ b/src/dnsmasq.h
@@ -281,7 +281,9 @@ struct event_desc {
 #define OPT_NORR           69
 #define OPT_NO_IDENT       70
 #define OPT_CACHE_RR       71
-#define OPT_LAST           72
+#define OPT_FILTER_HTTPS   72
+#define OPT_FILTER_UNKNOWN 73
+#define OPT_LAST           74
 
 #define OPTION_BITS (sizeof(unsigned int)*8)
 #define OPTION_SIZE ( (OPT_LAST/OPTION_BITS)+((OPT_LAST%OPTION_BITS)!=0) )
@@ -1329,6 +1331,10 @@ unsigned short rrtype(char *in);
 void next_uid(struct crec *crecp);
 void log_query(unsigned int flags, char *name, union all_addr *addr, char *arg, unsigned short type); 
 char *record_source(unsigned int index);
+// patch: function returns integer 1 if query type is unknown
+// known types are defined in cache.c:typestr:36.
+int is_query_type_unknown(unsigned short type);
+// end of patch
 int cache_find_non_terminal(char *name, time_t now);
 struct crec *cache_find_by_addr(struct crec *crecp,
 				union all_addr *addr, time_t now, 
diff --git a/src/option.c b/src/option.c
index 8322725..7b7c1a9 100644
--- a/src/option.c
+++ b/src/option.c
@@ -190,6 +190,8 @@ struct myoption {
 #define LOPT_FILTER_RR     381
 #define LOPT_NO_DHCP6      382
 #define LOPT_NO_DHCP4      383
+#define LOPT_FILTER_HTTPS  384
+#define LOPT_FILTER_UNKNOWN 385
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -384,6 +386,8 @@ static const struct myoption opts[] =
     { "fast-dns-retry", 2, 0, LOPT_FAST_RETRY },
     { "use-stale-cache", 2, 0 , LOPT_STALE_CACHE },
     { "no-ident", 0, 0, LOPT_NO_IDENT },
+    { "filter-https", 0, 0, LOPT_FILTER_HTTPS },
+    { "filter-unknown", 0, 0, LOPT_FILTER_UNKNOWN },
     { NULL, 0, 0, 0 }
   };
 
@@ -585,6 +589,8 @@ static struct {
   { LOPT_NORR, OPT_NORR, NULL, gettext_noop("Suppress round-robin ordering of DNS records."), NULL },
   { LOPT_NO_IDENT, OPT_NO_IDENT, NULL, gettext_noop("Do not add CHAOS TXT records."), NULL },
   { LOPT_CACHE_RR, ARG_DUP, "<RR-type>", gettext_noop("Cache this DNS resource record type."), NULL },
+  { LOPT_FILTER_HTTPS, OPT_FILTER_HTTPS, NULL, gettext_noop("Filter all HTTPS/query type 65 requests."), NULL },
+  { LOPT_FILTER_UNKNOWN, OPT_FILTER_UNKNOWN, NULL, gettext_noop("Filter all unknown query types (known are defined in cache.c)."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
diff --git a/src/rfc1035.c b/src/rfc1035.c
index 56b65bb..ea4f8c7 100644
--- a/src/rfc1035.c
+++ b/src/rfc1035.c
@@ -2099,6 +2099,23 @@ size_t answer_request(struct dns_header *header, char *limit, size_t qlen,
 		log_query(F_CONFIG | F_NEG, name, &addr, NULL, 0);
 	    }
 
+    //patch to filter https/query type 65 forwards
+    if (qtype == T_HTTPS && option_bool(OPT_FILTER_HTTPS) ){
+        //return a null reply
+        ans = 1;
+        if (!dryrun) log_query(F_CONFIG | F_IPV4 | F_NEG, name, &addr, NULL, 0);
+            break;
+    }
+    //end of patch
+    //patch to filter all unknown query types
+    //known types are defined in cache.c:typestr:36.
+    if (is_query_type_unknown(qtype) && option_bool(OPT_FILTER_UNKNOWN)) {
+        //return a null reply
+        ans = 1;
+        if (!dryrun) log_query(F_CONFIG | F_NEG, name, NULL, NULL, 0);
+            break;
+    }
+    //end of patch
 	  if (!ans)
 	    {
 	       if ((crecp = cache_find_by_name(NULL, name, now, F_RR | F_NXDOMAIN | (dryrun ? F_NO_RR : 0))) &&
